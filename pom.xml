<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0
                      http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <!-- The Basics -->
    <groupId>com.khapanser.app</groupId>
    <artifactId>Arduino</artifactId>
    <packaging>jar</packaging>
    <description>Arduino - app for testing functionality of Java plus Arduino.</description>
    <version>1.0</version>
    <name>Arduino</name>
    <url>http://maven.apache.org</url>

    <!--
    This or a similar warning is emitted by a plugin that processes plain text files but has not been configured
     to use a specific file encoding. So eliminating the warning is simply a matter
    of finding out which plugin emits it and how to configure the file encoding for it.
    This is as easy as adding the following property to your POM (or one of its parent POMs):
    -->
    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    </properties>


    <dependencies>

        <!-- tag::joda[] -->

            <dependency>
                <groupId>joda-time</groupId>
                <artifactId>joda-time</artifactId>
                <version>2.2</version>
            </dependency>
    <!-- Прописываем все используемые библиотеки (зависимости) -->
        <dependency>
            <groupId>com.arduino</groupId>
            <artifactId>ard1</artifactId>
            <version>1.0</version>
            <scope>system</scope>
            <systemPath>${basedir}/arduino.jar</systemPath>
        </dependency>

        <dependency>
            <groupId>com.jSerial</groupId>
            <artifactId>ard2</artifactId>
            <version>1.0</version>
            <scope>system</scope>
            <systemPath>${basedir}/jSerialComm-1.3.11.jar</systemPath>
        </dependency>     <!-- -->


        <!--		<dependency>
                    <groupId>com.khapanser.app</groupId>
                    <artifactId>Arduino</artifactId>
                    <version>1.0-SNAPSHOT</version>
                </dependency>-->

            <!-- end::joda[] -->

      <!--  <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>1.0</version>
            <scope>test</scope>
        </dependency>  -->


        <!-- https://mvnrepository.com/artifact/org.apache.commons/commons-io
        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-io</artifactId>
            <version>1.3.2</version>
        </dependency>


        <dependency>
            <groupId>com.liferay.portal</groupId>
            <artifactId>util-java</artifactId>
            <version>7.0.0-nightly</version>
            <scope>provided</scope>
        </dependency> -->


    </dependencies>

    <build>
        <plugins>
            <!--
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-shade-plugin</artifactId>
                <version>2.1</version>
                <executions>
                    <execution>
                        <phase>package</phase>
                        <goals>
                            <goal>shade</goal>
                        </goals>
                        <configuration>
                            <transformers>
                                <transformer
                                        implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer">
                                    <mainClass>main.java.ArduinoServer</mainClass>
                                </transformer>
                            </transformers>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
-->
            <!--       <plugin>
                      <groupId>org.apache.maven.plugins</groupId>
                      <artifactId>maven-jar-plugin</artifactId>
                      <configuration>
                          <archive>
                              <manifest>
                                  <addClasspath>true</addClasspath>
                                  <classpathPrefix>lib/</classpathPrefix>
                                  <mainClass>com.khapersky.app</mainClass>
                              </manifest>
                          </archive>
                      </configuration>
                  </plugin>

                        <plugin>
                             <groupId>org.apache.maven.plugins</groupId>
                             <artifactId>maven-dependency-plugin</artifactId>
                             <executions>
                                 <execution>
                                     <id>copy</id>
                                     <phase>install</phase>
                                     <goals>
                                         <goal>copy-dependencies</goal>
                                     </goals>
                                     <configuration>
                                         <outputDirectory>
                                             ${project.build.directory}/lib
                                         </outputDirectory>
                                     </configuration>
                                 </execution>
                             </executions>
                         </plugin>




                          -->
            <!-- The first plugin puts all dependencies in the target/classes/lib folder  -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-dependency-plugin</artifactId>
                <executions>
                    <execution>
                        <id>copy-dependencies</id>
                        <phase>prepare-package</phase>
                        <goals>
                            <goal>copy-dependencies</goal>
                        </goals>
                        <configuration>
                            <outputDirectory>${project.build.directory}/classes/lib</outputDirectory>
                            <overWriteReleases>false</overWriteReleases>
                            <overWriteSnapshots>false</overWriteSnapshots>
                            <overWriteIfNewer>true</overWriteIfNewer>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
<!--  The second one includes the library folder in the final JAR file, and configures the Manifest.mf file.  -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-jar-plugin</artifactId>
                <configuration>
                    <archive>
                        <manifest>
                            <addClasspath>true</addClasspath>
                            <!-- <classpathPrefix>lib</classpathPrefix> -->
                            <!-- <mainClass>test.org.Cliente</mainClass> -->
                        </manifest>
                        <manifestEntries>
                            <Class-Path>lib/</Class-Path>
                        </manifestEntries>
                    </archive>
                </configuration>
            </plugin>





            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.3</version>
                <configuration>
                    <source>1.8</source>
                    <target>1.8</target>
                </configuration>
            </plugin>

        </plugins>
    </build>




        </project>

